type: edu
custom_name: stage6
files:
- name: build.gradle
  visible: true
  text: |
    plugins {
        id 'org.springframework.boot' version '2.2.2.RELEASE'
        id 'java'
    }

    apply plugin: 'io.spring.dependency-management'

    sourceCompatibility = 11

    repositories {
        mavenCentral()
    }

    sourceSets.main.resources.srcDirs = ["src/resources"]

    dependencies {
        implementation 'org.springframework.boot:spring-boot-starter'
        implementation 'org.springframework.boot:spring-boot-starter-actuator'
        implementation 'org.springframework.boot:spring-boot-starter-web'
    }
  learner_created: false
- name: src/engine/WebQuizEngine.java
  visible: true
  text: |
    package engine;

    import org.springframework.boot.SpringApplication;
    import org.springframework.boot.autoconfigure.SpringBootApplication;

    @SpringBootApplication
    public class WebQuizEngine {

        public static void main(String[] args) {
            SpringApplication.run(WebQuizEngine.class, args);
        }

    }
  learner_created: false
- name: src/resources/application.properties
  visible: true
  text: |
    server.port=8889
    management.endpoints.web.exposure.include=*
    management.endpoint.shutdown.enabled=true
  learner_created: false
- name: test/tests/WebQuizEngineTest.java
  visible: false
  text: |
    package tests;

    import com.google.gson.JsonElement;
    import com.google.gson.JsonObject;
    import engine.WebQuizEngine;
    import org.hyperskill.hstest.dynamic.input.DynamicTesting;
    import org.hyperskill.hstest.dynamic.input.DynamicTestingMethod;
    import org.hyperskill.hstest.exception.outcomes.UnexpectedError;
    import org.hyperskill.hstest.exception.outcomes.WrongAnswer;
    import org.hyperskill.hstest.mocks.web.request.HttpRequest;
    import org.hyperskill.hstest.mocks.web.response.HttpResponse;
    import org.hyperskill.hstest.stage.SpringTest;
    import org.hyperskill.hstest.testcase.CheckResult;

    import static org.hyperskill.hstest.common.JsonUtils.getJson;
    import static org.hyperskill.hstest.common.JsonUtils.getPrettyJson;
    import static org.hyperskill.hstest.testing.expect.Expectation.expect;
    import static org.hyperskill.hstest.testing.expect.json.JsonChecker.any;
    import static org.hyperskill.hstest.testing.expect.json.JsonChecker.isArray;
    import static org.hyperskill.hstest.testing.expect.json.JsonChecker.isInteger;
    import static org.hyperskill.hstest.testing.expect.json.JsonChecker.isObject;
    import static org.hyperskill.hstest.testing.expect.json.JsonChecker.isString;

    public class WebQuizEngineTest extends SpringTest {
        public WebQuizEngineTest() {
            super(WebQuizEngine.class, "../quizdb.mv.db");
        }

        static void checkStatusCode(HttpResponse resp, int status) {
            if (resp.getStatusCode() != status) {
                throw new WrongAnswer(
                    resp.getRequest().getMethod() + " " +
                        resp.getRequest().getLocalUri() +
                        " should respond with status code " + status + ", " +
                        "responded: " + resp.getStatusCode() + "\n\n" +
                        "Response body:\n\n" + resp.getContent()
                );
            }
        }

        private static String quiz1 =
            "{\n" +
                "  \"title\": \"The Java Logo\", \n" +
                "  \"text\": \"What is depicted on the Java logo?\",\n" +
                "  \"options\": [\"Robot\",\"Tea leaf\",\"Cup of coffee\",\"Bug\"],\n" +
                "  \"answer\": [2]\n" +
                "}";

        private static String quiz2 =
            "{\n" +
                "  \"title\": \"The Ultimate Question\",\n" +
                "  \"text\": \"What is the answer to the Ultimate Question of Life, the Universe and Everything?\",\n" +
                "  \"options\": [\"Everything goes right\",\"42\",\"2+2=4\",\"11011100\"],\n" +
                "  \"answer\": [1]\n" +
                "}";

        private static String quiz3 =
            "{\n" +
                "  \"title\": \"Math1\",\n" +
                "  \"text\": \"Which of the following is equal to 4?\",\n" +
                "  \"options\": [\"1+3\",\"2+2\",\"8-1\",\"1+5\"],\n" +
                "  \"answer\": [0,1]\n" +
                "}";

        private static String quiz4 =
            "{\n" +
                "  \"title\": \"Math2\",\n" +
                "  \"text\": \"Which of the following is equal to 4?\",\n" +
                "  \"options\": [\"1+1\",\"2+2\",\"8-1\",\"5-1\"],\n" +
                "  \"answer\": [1,3]\n" +
                "}";

        private static String quiz5 =
            "{\n" +
                "  \"title\": \"Math3\",\n" +
                "  \"text\": \"Which of the following is equal to 4?\",\n" +
                "  \"options\": [\"2*3\",\"5*8\",\"8*0\",\"1*5\"],\n" +
                "  \"answer\": []\n" +
                "}";

        private static String quiz6 =
            "{\n" +
                "  \"title\": \"Math4\",\n" +
                "  \"text\": \"Which of the following is equal to 4?\",\n" +
                "  \"options\": [\"2*3\",\"5*8\",\"8*0\",\"1*5\"]\n" +
                "}";

        private static String quiz7 =
            "{\n" +
                "  \"title\": \"Math5\",\n" +
                "  \"text\": \"Which of the following is equal to 4?\",\n" +
                "  \"options\": [\"2^2\",\"2+2\",\"2-2\",\"2*2\"],\n" +
                "  \"answer\": [0,1,3]\n" +
                "}";

        private static String[] quizzes = new String[] {
            quiz1, quiz2, quiz3, quiz4, quiz5, quiz6, quiz7
        };

        private static int[] quizIds = new int[] {
            0, 0, 0, 0, 0, 0, 0
        };

        private static String error400noTitle =
            "{\n" +
                "  \"text\": \"What is the answer to the Ultimate Question of Life, the Universe and Everything?\",\n" +
                "  \"options\": [\"Everything goes right\",\"42\",\"2+2=4\",\"11011100\"]\n" +
                "  \"answer\": [1]\n" +
                "}";

        private static String error400emptyTitle =
            "{\n" +
                "  \"title\": \"\",\n" +
                "  \"text\": \"What is the answer to the Ultimate Question of Life, the Universe and Everything?\",\n" +
                "  \"options\": [\"Everything goes right\",\"42\",\"2+2=4\",\"11011100\"]\n" +
                "  \"answer\": [1]\n" +
                "}";

        private static String error400noText =
            "{\n" +
                "  \"title\": \"123123123\",\n" +
                "  \"options\": [\"Everything goes right\",\"42\",\"2+2=4\",\"11011100\"]\n" +
                "  \"answer\": [1]\n" +
                "}";

        private static String error400emptyText =
            "{\n" +
                "  \"title\": \"The Ultimate Question\",\n" +
                "  \"text\": \"\",\n" +
                "  \"options\": [\"Everything goes right\",\"42\",\"2+2=4\",\"11011100\"]\n" +
                "  \"answer\": [1]\n" +
                "}";

        private static String error400noOptions =
            "{\n" +
                "  \"title\": \"The Ultimate Question\",\n" +
                "  \"text\": \"123123123\",\n" +
                "  \"answer\": [1]\n" +
                "}";

        private static String error400emptyOptions =
            "{\n" +
                "  \"title\": \"The Ultimate Question\",\n" +
                "  \"text\": \"What is the answer to the Ultimate Question of Life, the Universe and Everything?\",\n" +
                "  \"options\": [ ]\n" +
                "  \"answer\": [ ]\n" +
                "}";

        private static String error400oneOption =
            "{\n" +
                "  \"title\": \"The Ultimate Question\",\n" +
                "  \"text\": \"What is the answer to the Ultimate Question of Life, the Universe and Everything?\",\n" +
                "  \"options\": [\"Everything goes right\"]\n" +
                "  \"answer\": [0]\n" +
                "}";


        private static String login1 = "test@google.com";
        private static String pass1 = "qwerty";

        private static String login2 = "user@google.com";
        private static String pass2 = "12345";

        private static HttpRequest auth(HttpRequest req, int user) {
            String login;
            String pass;
            if (user == 1) {
                login = login1;
                pass = pass1;
            } else if (user == 2) {
                login = login2;
                pass = pass2;
            } else {
                login = fakeLogin;
                pass = fakePass;
            }
            return req.basicAuth(login, pass);
        }

        private static String fakeLogin = "qwerty@google.com";
        private static String fakePass = "456534";

        private static String noAtInLogin_login = "google.com";
        private static String noAtInLogin_pass = "asddfggh";

        private static String noDotInLogin_login = "well@googlecom";
        private static String noDotInLogin_pass = "rtyfgcxsfd";

        private static String loginExist_login = "test@google.com";
        private static String loginExist_pass = "rtyfgcxsfd1";

        private static String shortPassword_login = "someuser@gmail.com";
        private static String shortPassword_pass = "1234";

        private static String shortPassword2_login = "someuser2@gmail.com";
        private static String shortPassword2_pass = "123";

        @DynamicTestingMethod
        DynamicTesting[] dt = new DynamicTesting[] {
            // Test login
            () -> testRegister(login1, pass1, 200),
            () -> testRegister(login2, pass2, 200),
            () -> testRegister(noAtInLogin_login, noAtInLogin_pass, 400),
            () -> testRegister(noDotInLogin_login, noDotInLogin_pass, 400),
            () -> testRegister(loginExist_login, loginExist_pass, 400),
            () -> testRegister(shortPassword_login, shortPassword_pass, 400),
            () -> testRegister(shortPassword2_login, shortPassword2_pass, 400),


            // Add 2 quizzes and check their existence
            () -> testAllQuizzes(0, 0,1),
            () -> testAllQuizzes(0, 0,2),

            () -> testCreateQuiz(0, 1),
            () -> testQuizExists(0, 2),
            () -> testQuizNotExists(0, 2, 125),

            () -> testAllQuizzes(1, 0,1),

            () -> testCreateQuiz(1, 2),
            () -> testQuizExists(1, 2),
            () -> testQuizNotExists(1, 2, 125),

            () -> testAllQuizzes(2, 0,2),


            // No auth operations tests
            () -> testAllQuizzesNoAuth(),
            () -> testCreateQuizNoAuth(1),
            () -> testCreateQuizNoAuth(2),
            () -> testSolveQuizNoAuth(quizIds[0], "[0]"),
            () -> testSolveQuizNoAuth(quizIds[1], "[1]"),
            () -> testDeleteQuizzesNoAuth(quizIds[0]),
            () -> testDeleteQuizzesNoAuth(quizIds[1]),
            () -> testCompletedQuizzesNoAuth(),


            // Fake auth operations tests
            () -> testAllQuizzesFakeAuth(),
            () -> testCreateQuizFakeAuth(1),
            () -> testCreateQuizFakeAuth(2),
            () -> testSolveQuizFakeAuth(quizIds[0], "[0]"),
            () -> testSolveQuizFakeAuth(quizIds[1], "[1]"),
            () -> testDeleteQuizzesFakeAuth(quizIds[0]),
            () -> testDeleteQuizzesFakeAuth(quizIds[1]),
            () -> testCompletedQuizzesFakeAuth(),


            // Solve two quizzes
            () -> checkQuizSuccess(quizIds[0], "[0]", false, 1),
            () -> checkQuizSuccess(quizIds[0], "[1]", false, 2),
            () -> checkQuizSuccess(quizIds[0], "[2]", true, 1),
            () -> checkQuizSuccess(quizIds[0], "[3]", false, 2),

            () -> checkQuizSuccess(quizIds[1], "[0]", false, 1),
            () -> checkQuizSuccess(quizIds[1], "[1]", true, 2),
            () -> checkQuizSuccess(quizIds[1], "[2]", false, 1),
            () -> checkQuizSuccess(quizIds[1], "[3]", false, 2),


            // Check completed
            () -> testCompletedQuizzes(1, 1, 0 ,0, quizIds[0]),
            () -> testCompletedQuizzes(1, 2, 0, 0, quizIds[1]),


            // Test database save
            () -> testAllQuizzes(2, 0, 1),
            () -> testAllQuizzes(2, 0,2),
            () -> reloadServer(),
            () -> testAllQuizzes(2, 0,1),
            () -> testAllQuizzes(2, 0,2),
            () -> checkQuizSuccess(quizIds[0], "[2]", true, 2),
            () -> checkQuizSuccess(quizIds[0], "[3]", false, 1),
            () -> checkQuizSuccess(quizIds[1], "[0]", false, 2),
            () -> checkQuizSuccess(quizIds[1], "[1]", true, 1),


            // Check completed
            () -> testCompletedQuizzes(2, 1, 0 ,1, quizIds[0]),
            () -> testCompletedQuizzes(2, 1, 0 ,0, quizIds[1]),

            () -> testCompletedQuizzes(2, 2, 0, 1, quizIds[1]),
            () -> testCompletedQuizzes(2, 2, 0, 0, quizIds[0]),


            // Test wrongly created quizzes
            () -> addIncorrectQuiz(error400noTitle, 1),
            () -> addIncorrectQuiz(error400emptyTitle, 2),
            () -> addIncorrectQuiz(error400noText, 1),
            () -> addIncorrectQuiz(error400emptyText, 2),
            () -> addIncorrectQuiz(error400noOptions, 1),
            () -> addIncorrectQuiz(error400emptyOptions, 2),
            () -> addIncorrectQuiz(error400oneOption, 1),


            // Test multiple answers
            () -> testCreateQuiz(2, 1),
            () -> testQuizExists(2, 1),
            () -> testQuizNotExists(2, 1, 125),
            () -> checkQuizSuccess(quizIds[2], "[]", false, 1),
            () -> checkQuizSuccess(quizIds[2], "[0]", false, 2),
            () -> checkQuizSuccess(quizIds[2], "[1]", false, 1),
            () -> checkQuizSuccess(quizIds[2], "[2]", false, 2),
            () -> checkQuizSuccess(quizIds[2], "[3]", false, 1),
            () -> checkQuizSuccess(quizIds[2], "[0,1]", true, 2),
            () -> checkQuizSuccess(quizIds[2], "[0,2]", false, 1),
            () -> checkQuizSuccess(quizIds[2], "[0,3]", false, 2),
            () -> checkQuizSuccess(quizIds[2], "[1,2]", false, 1),
            () -> checkQuizSuccess(quizIds[2], "[1,3]", false, 2),
            () -> checkQuizSuccess(quizIds[2], "[2,3]", false, 1),
            () -> checkQuizSuccess(quizIds[2], "[0,1,2]", false, 2),
            () -> checkQuizSuccess(quizIds[2], "[0,1,3]", false, 1),
            () -> checkQuizSuccess(quizIds[2], "[1,2,3]", false, 2),
            () -> checkQuizSuccess(quizIds[2], "[0,1,2,3]", false, 1),

            () -> testCreateQuiz(3, 1),
            () -> testQuizExists(3, 1),
            () -> testQuizNotExists(3, 1, 125),
            () -> checkQuizSuccess(quizIds[3], "[]", false, 1),
            () -> checkQuizSuccess(quizIds[3], "[0]", false, 2),
            () -> checkQuizSuccess(quizIds[3], "[1]", false, 1),
            () -> checkQuizSuccess(quizIds[3], "[2]", false, 2),
            () -> checkQuizSuccess(quizIds[3], "[3]", false, 1),
            () -> checkQuizSuccess(quizIds[3], "[0,1]", false, 2),
            () -> checkQuizSuccess(quizIds[3], "[0,2]", false, 1),
            () -> checkQuizSuccess(quizIds[3], "[0,3]", false, 2),
            () -> checkQuizSuccess(quizIds[3], "[1,2]", false, 1),
            () -> checkQuizSuccess(quizIds[3], "[1,3]", true, 2),
            () -> checkQuizSuccess(quizIds[3], "[2,3]", false, 1),
            () -> checkQuizSuccess(quizIds[3], "[0,1,2]", false, 2),
            () -> checkQuizSuccess(quizIds[3], "[0,1,3]", false, 1),
            () -> checkQuizSuccess(quizIds[3], "[1,2,3]", false, 2),
            () -> checkQuizSuccess(quizIds[3], "[0,1,2,3]", false, 1),

            () -> testCreateQuiz(4, 1),
            () -> testQuizExists(4, 1),
            () -> testQuizNotExists(4, 1, 125),
            () -> checkQuizSuccess(quizIds[4], "[]", true, 1),
            () -> checkQuizSuccess(quizIds[4], "[0]", false, 2),
            () -> checkQuizSuccess(quizIds[4], "[1]", false, 1),
            () -> checkQuizSuccess(quizIds[4], "[2]", false, 2),
            () -> checkQuizSuccess(quizIds[4], "[3]", false, 1),
            () -> checkQuizSuccess(quizIds[4], "[0,1]", false, 2),
            () -> checkQuizSuccess(quizIds[4], "[0,2]", false, 1),
            () -> checkQuizSuccess(quizIds[4], "[0,3]", false, 2),
            () -> checkQuizSuccess(quizIds[4], "[1,2]", false, 1),
            () -> checkQuizSuccess(quizIds[4], "[1,3]", false, 2),
            () -> checkQuizSuccess(quizIds[4], "[2,3]", false, 1),
            () -> checkQuizSuccess(quizIds[4], "[0,1,2]", false, 1),
            () -> checkQuizSuccess(quizIds[4], "[0,1,3]", false, 2),
            () -> checkQuizSuccess(quizIds[4], "[1,2,3]", false, 1),
            () -> checkQuizSuccess(quizIds[4], "[0,1,2,3]", false, 2),

            () -> testCreateQuiz(5, 1),
            () -> testQuizExists(5, 1),
            () -> testQuizNotExists(5, 1, 125),
            () -> checkQuizSuccess(quizIds[5], "[]", true, 1),
            () -> checkQuizSuccess(quizIds[5], "[0]", false, 1),
            () -> checkQuizSuccess(quizIds[5], "[1]", false, 1),
            () -> checkQuizSuccess(quizIds[5], "[2]", false, 1),
            () -> checkQuizSuccess(quizIds[5], "[3]", false, 1),
            () -> checkQuizSuccess(quizIds[5], "[0,1]", false, 1),
            () -> checkQuizSuccess(quizIds[5], "[0,2]", false, 1),
            () -> checkQuizSuccess(quizIds[5], "[0,3]", false, 1),
            () -> checkQuizSuccess(quizIds[5], "[1,2]", false, 1),
            () -> checkQuizSuccess(quizIds[5], "[1,3]", false, 1),
            () -> checkQuizSuccess(quizIds[5], "[2,3]", false, 1),
            () -> checkQuizSuccess(quizIds[5], "[0,1,2]", false, 1),
            () -> checkQuizSuccess(quizIds[5], "[0,1,3]", false, 1),
            () -> checkQuizSuccess(quizIds[5], "[1,2,3]", false, 1),
            () -> checkQuizSuccess(quizIds[5], "[0,1,2,3]", false, 1),

            () -> testCreateQuiz(6, 1),
            () -> testQuizExists(6, 1),
            () -> testQuizNotExists(6, 1, 125),
            () -> checkQuizSuccess(quizIds[6], "[]", false, 2),
            () -> checkQuizSuccess(quizIds[6], "[0]", false, 2),
            () -> checkQuizSuccess(quizIds[6], "[1]", false, 2),
            () -> checkQuizSuccess(quizIds[6], "[2]", false, 2),
            () -> checkQuizSuccess(quizIds[6], "[3]", false, 2),
            () -> checkQuizSuccess(quizIds[6], "[0,1]", false, 2),
            () -> checkQuizSuccess(quizIds[6], "[0,2]", false, 2),
            () -> checkQuizSuccess(quizIds[6], "[0,3]", false, 2),
            () -> checkQuizSuccess(quizIds[6], "[1,2]", false, 2),
            () -> checkQuizSuccess(quizIds[6], "[1,3]", false, 2),
            () -> checkQuizSuccess(quizIds[6], "[2,3]", false, 2),
            () -> checkQuizSuccess(quizIds[6], "[0,1,2]", false, 2),
            () -> checkQuizSuccess(quizIds[6], "[0,1,3]", true, 2),
            () -> checkQuizSuccess(quizIds[6], "[1,2,3]", false, 2),
            () -> checkQuizSuccess(quizIds[6], "[0,1,2,3]", false, 2),

            () -> testAllQuizzes(7, 0,2),
            () -> reloadServer(),
            () -> testAllQuizzes(7, 0,2),
            () -> checkQuizSuccess(quizIds[5], "[]", true, 1),
            () -> checkQuizSuccess(quizIds[5], "[0]", false, 2),
            () -> checkQuizSuccess(quizIds[6], "[0,1,2]", false, 1),
            () -> checkQuizSuccess(quizIds[6], "[0,1,3]", true, 2),


            // Check completed
            () -> testCompletedQuizzes(5, 1, 0 ,4, quizIds[0]),
            () -> testCompletedQuizzes(5, 1, 0 ,3, quizIds[1]),
            () -> testCompletedQuizzes(5, 1, 0 ,2, quizIds[4]),
            () -> testCompletedQuizzes(5, 1, 0 ,1, quizIds[5]),
            () -> testCompletedQuizzes(5, 1, 0 ,0, quizIds[5]),

            () -> testCompletedQuizzes(6, 2, 0, 5, quizIds[1]),
            () -> testCompletedQuizzes(6, 2, 0, 4, quizIds[0]),
            () -> testCompletedQuizzes(6, 2, 0, 3, quizIds[2]),
            () -> testCompletedQuizzes(6, 2, 0, 2, quizIds[3]),
            () -> testCompletedQuizzes(6, 2, 0, 1, quizIds[6]),
            () -> testCompletedQuizzes(6, 2, 0, 0, quizIds[6]),


            // Test pagination completed quizzes
            () -> checkQuizSuccess(quizIds[4], "[]", true, 1),
            () -> checkQuizSuccess(quizIds[4], "[]", true, 1),
            () -> checkQuizSuccess(quizIds[4], "[]", true, 1),
            () -> checkQuizSuccess(quizIds[4], "[]", true, 1),
            () -> checkQuizSuccess(quizIds[4], "[]", true, 1),
            () -> checkQuizSuccess(quizIds[6], "[0,1,3]", true, 1),

            () -> checkQuizSuccess(quizIds[3], "[1,3]", true, 2),
            () -> checkQuizSuccess(quizIds[3], "[1,3]", true, 2),
            () -> checkQuizSuccess(quizIds[3], "[1,3]", true, 2),
            () -> checkQuizSuccess(quizIds[3], "[1,3]", true, 2),
            () -> checkQuizSuccess(quizIds[3], "[1,3]", true, 2),
            () -> checkQuizSuccess(quizIds[5], "[]", true, 2),

            () -> testCompletedQuizzes(10, 1, 0 ,0, quizIds[6]),
            () -> testCompletedQuizzes(10, 1, 0 ,1, quizIds[4]),
            () -> testCompletedQuizzes(10, 1, 0 ,2, quizIds[4]),
            () -> testCompletedQuizzes(10, 1, 0 ,3, quizIds[4]),
            () -> testCompletedQuizzes(10, 1, 0 ,4, quizIds[4]),
            () -> testCompletedQuizzes(10, 1, 0 ,5, quizIds[4]),
            () -> testCompletedQuizzes(1, 1, 1 ,0, quizIds[0]),

            () -> testCompletedQuizzes(10, 2, 0 ,0, quizIds[5]),
            () -> testCompletedQuizzes(10, 2, 0 ,1, quizIds[3]),
            () -> testCompletedQuizzes(10, 2, 0 ,2, quizIds[3]),
            () -> testCompletedQuizzes(10, 2, 0 ,3, quizIds[3]),
            () -> testCompletedQuizzes(10, 2, 0 ,4, quizIds[3]),
            () -> testCompletedQuizzes(10, 2, 0 ,5, quizIds[3]),
            () -> testCompletedQuizzes(2, 2, 1 ,1, quizIds[1]),
            () -> testCompletedQuizzes(2, 2, 1 ,0, quizIds[0]),


            // Test delete
            () -> testDelete(quizIds[0], 1, 204),
            () -> testDelete(quizIds[0], 1, 404),
            () -> testQuizNotExists(0, 1, 0),
            () -> testQuizNotExists(0, 2, 0),
            () -> testQuizExists(1, 1),
            () -> testQuizExists(1, 2),

            () -> testDelete(quizIds[1], 1, 403),
            () -> testDelete(quizIds[1], 1, 403),
            () -> testDelete(quizIds[1], 2, 204),
            () -> testDelete(quizIds[1], 2, 404),
            () -> testDelete(quizIds[1], 1, 404),
            () -> testQuizNotExists(0, 1, 0),
            () -> testQuizNotExists(0, 2, 0),
            () -> testQuizNotExists(1, 1, 0),
            () -> testQuizNotExists(1, 2, 0),

            () -> testAllQuizzes(5, 0,1),
            () -> reloadServer(),
            () -> testAllQuizzes(5, 0,2),
            () -> testQuizNotExists(0, 1, 0),
            () -> testQuizNotExists(0, 2, 0),
            () -> testQuizNotExists(1, 1, 0),
            () -> testQuizNotExists(1, 2, 0),


            // Test pagination all quizzes
            () -> testCreateQuiz(6, 1),
            () -> testCreateQuiz(6, 2),
            () -> testCreateQuiz(6, 1),
            () -> testCreateQuiz(6, 1),
            () -> testCreateQuiz(6, 1),
            () -> testCreateQuiz(6, 2),
            () -> testCreateQuiz(6, 1),
            () -> testCreateQuiz(6, 2),
            () -> testCreateQuiz(6, 1),
            () -> testCreateQuiz(6, 2),
            () -> testAllQuizzes(10, 0,1),
            () -> testAllQuizzes(10, 0,2),
            () -> testAllQuizzes(5, 1,1),
            () -> testAllQuizzes(5, 1,2),
        };

        private CheckResult testRegister(String login, String password, int status) {
            JsonObject json = new JsonObject();
            json.addProperty("email", login);
            json.addProperty("password", password);

            String url = "/api/register";
            HttpRequest req = post(url, getPrettyJson(json));
            HttpResponse resp = req.send();

            checkStatusCode(resp, status);
            return CheckResult.correct();
        }

        private CheckResult testCreateQuizNoAuth(int quizNum) {
            String url = "/api/quizzes";
            HttpRequest req = post(url, quizzes[quizNum]);
            HttpResponse resp = req.send();
            checkStatusCode(resp, 401);
            return CheckResult.correct();
        }

        private CheckResult testCreateQuizFakeAuth(int quizNum) {
            String url = "/api/quizzes";
            HttpRequest req = post(url, quizzes[quizNum]);
            HttpResponse resp = auth(req, 3).send();
            checkStatusCode(resp, 401);
            return CheckResult.correct();
        }

        private CheckResult testSolveQuizNoAuth(int quizNum, String answerSent) {
            String url = "/api/quizzes/" + quizNum + "/solve";
            HttpRequest req = post(url, "{" + " \"answer\" : " + answerSent + "}");
            HttpResponse resp = req.send();
            checkStatusCode(resp, 401);
            return CheckResult.correct();
        }

        private CheckResult testSolveQuizFakeAuth(int quizNum, String answerSent) {
            String url = "/api/quizzes/" + quizNum + "/solve";
            HttpRequest req = post(url, "{" + " \"answer\" : " + answerSent + "}");
            HttpResponse resp = auth(req, 3).send();
            checkStatusCode(resp, 401);
            return CheckResult.correct();
        }

        private CheckResult testAllQuizzesNoAuth() {
            String url = "/api/quizzes";
            HttpResponse resp = get(url).send();
            checkStatusCode(resp, 401);
            return CheckResult.correct();
        }

        private CheckResult testAllQuizzesFakeAuth() {
            String url = "/api/quizzes";
            HttpResponse resp = auth(get(url), 3).send();
            checkStatusCode(resp, 401);
            return CheckResult.correct();
        }

        private CheckResult testDeleteQuizzesNoAuth(int quizNum) {
            String url = "/api/quizzes/" + quizNum;
            HttpRequest req = delete(url);
            HttpResponse resp = req.send();
            checkStatusCode(resp, 401);
            return CheckResult.correct();
        }

        private CheckResult testDeleteQuizzesFakeAuth(int quizNum) {
            String url = "/api/quizzes/" + quizNum;
            HttpRequest req = delete(url);
            HttpResponse resp = auth(req, 3).send();
            checkStatusCode(resp, 401);
            return CheckResult.correct();
        }

        private CheckResult testCompletedQuizzesNoAuth() {
            String url = "/api/quizzes/completed";
            HttpRequest req = get(url).addParam("page", "0");
            HttpResponse resp = req.send();
            checkStatusCode(resp, 401);
            return CheckResult.correct();
        }

        private CheckResult testCompletedQuizzesFakeAuth() {
            String url = "/api/quizzes/completed";
            HttpRequest req = get(url).addParam("page", "0");
            HttpResponse resp = auth(req, 3).send();
            checkStatusCode(resp, 401);
            return CheckResult.correct();
        }

        private CheckResult testCreateQuiz(int quizNum, int user) {
            String url = "/api/quizzes";
            HttpRequest req = post(url, quizzes[quizNum]);
            HttpResponse resp = auth(req, user).send();
            checkStatusCode(resp, 200);

            expect(resp.getContent()).asJson().check(
                isObject()
                    .value("id", isInteger(i -> {
                        quizIds[quizNum] = i;
                        return true;
                    }))
                    .anyOtherValues()
            );

            return CheckResult.correct();
        }

        private CheckResult testQuizExists(int quizNum, int user) {
            int quizId = quizIds[quizNum];
            String quiz = quizzes[quizNum];

            String url = "/api/quizzes/" + quizId;

            HttpResponse resp = auth(get(url), user).send();
            checkStatusCode(resp, 200);

            JsonObject rightQuiz = getJson(quiz).getAsJsonObject();
            rightQuiz.remove("answer");
            rightQuiz.addProperty("id", quizId);

            expect(getPrettyJson(rightQuiz)).asJson().check(
                isObject()
                    .value("id", quizId)
                    .value("title", isString())
                    .value("text", isString())
                    .value("options", isArray(any()))
            );

            JsonElement json = resp.getJson();

            CheckResult wrongResponse = CheckResult.wrong(
                "The quiz sent to the program looked like this:\n" +
                    getPrettyJson(rightQuiz) + "\n\n" +
                    "But the received quiz looks like that:\n" +
                    getPrettyJson(json)
            );

            if (!json.isJsonObject()) {
                return wrongResponse;
            }

            JsonObject obj = json.getAsJsonObject();

            if (!rightQuiz.equals(obj)) {
                return wrongResponse;
            }

            return CheckResult.correct();
        }

        private CheckResult testQuizNotExists(int quizNum, int user, int shift) {
            int quizId = quizIds[quizNum];

            String url = "/api/quizzes/" + (quizId + shift);
            HttpResponse resp = auth(get(url), user).send();
            checkStatusCode(resp, 404);

            return CheckResult.correct();
        }

        private CheckResult testAllQuizzes(int count, int page, int user) {
            String url = "/api/quizzes";
            HttpRequest req = get(url).addParam("page", "" + page);
            HttpResponse resp = auth(req, user).send();
            checkStatusCode(resp, 200);

            expect(resp.getContent()).asJson().check(
                isObject()
                    .value("content", isArray(count, isObject()
                        .value("id", isInteger())
                        .value("title", isString())
                        .value("text", isString())
                        .value("options", isArray(any()))
                    ))
                    .anyOtherValues()
            );

            return CheckResult.correct();
        }

        private CheckResult testCompletedQuizzes(int count, int user, int page, int indexForCheckingQuizId, int quizNum) {
            String url = "/api/quizzes/completed";
            HttpRequest req = get(url).addParam("page", "" + page);
            HttpResponse resp = auth(req, user).send();
            checkStatusCode(resp, 200);

            expect(resp.getContent()).asJson().check(
                isObject()
                    .value("content",
                        isArray(count,
                            isObject()
                                .value("id", isInteger())
                                .value("completedAt", isString()))

                            .item(indexForCheckingQuizId,
                                isObject()
                                    .value("id", quizNum)
                                    .value("completedAt", isString()))
                    )
                    .anyOtherValues()
            );

            return CheckResult.correct();
        }

        private CheckResult checkQuizSuccess(int quizNum, String answerSent, boolean shouldResponse, int user) {
            String url = "/api/quizzes/" + quizNum + "/solve";

            HttpRequest req = post(url, "{" + " \"answer\" : " + answerSent + "}");
            HttpResponse resp = auth(req, user).send();
            checkStatusCode(resp, 200);

            expect(resp.getContent()).asJson().check(
                isObject()
                    .value("success", shouldResponse)
                    .value("feedback", isString())
            );

            return CheckResult.correct();
        }

        private CheckResult addIncorrectQuiz(String quiz, int user) {
            String url = "/api/quizzes";
            HttpRequest req = post(url, quiz);
            HttpResponse resp = auth(req, user).send();
            checkStatusCode(resp, 400);
            return CheckResult.correct();
        }

        private CheckResult testDelete(int quizNum, int user, int status) {
            String url = "/api/quizzes/" + quizNum;
            HttpRequest req = delete(url);
            HttpResponse resp = auth(req, user).send();
            checkStatusCode(resp, status);
            return CheckResult.correct();
        }

        private CheckResult reloadServer() {
            try {
                reloadSpring();
            } catch (Exception ex) {
                throw new UnexpectedError(ex.getMessage(), ex);
            }
            return CheckResult.correct();
        }
    }
  learner_created: false
- name: src/engine/auth/SecurityConfig.java
  visible: true
  text: |
    package engine.auth;

    import org.springframework.beans.factory.annotation.Autowired;
    import org.springframework.context.annotation.Bean;
    import org.springframework.context.annotation.Configuration;
    import org.springframework.http.HttpMethod;
    import org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder;
    import org.springframework.security.config.annotation.web.builders.HttpSecurity;
    import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;
    import org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;
    import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
    import org.springframework.security.crypto.password.PasswordEncoder;

    @Configuration
    @EnableWebSecurity
    public class SecurityConfig extends WebSecurityConfigurerAdapter {
        private static final String USER = "USER";
        @Autowired
        CustomAuthProvider customAuthProvider;
        @Override
        protected void configure(AuthenticationManagerBuilder auth) throws Exception {
            auth.authenticationProvider(customAuthProvider);
        }

        @Override
        protected void configure(HttpSecurity http) throws Exception {
            http.csrf().disable()
                    .headers().frameOptions().disable()
                    .and()
                    .httpBasic()
                    .and()
                    .authorizeRequests()
                    .antMatchers(HttpMethod.POST, "/api/register/", "/actuator/shutdown/")
                    .permitAll()
                    .antMatchers("/api/quizzes/**")
                    .authenticated()
                    .and()
                    .formLogin()
                    .permitAll();

        }

        @Bean
        public PasswordEncoder getEncoder() {
            return new BCryptPasswordEncoder();
        }
    }
  learner_created: true
- name: src/engine/auth/CustomAuthProvider.java
  visible: true
  text: |
    package engine.auth;

    import engine.QuizController;
    import org.springframework.beans.factory.annotation.Autowired;
    import org.springframework.security.authentication.AuthenticationProvider;
    import org.springframework.security.authentication.BadCredentialsException;
    import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;
    import org.springframework.security.core.Authentication;
    import org.springframework.security.core.AuthenticationException;
    import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
    import org.springframework.stereotype.Component;

    import java.util.ArrayList;
    import java.util.Collections;
    import java.util.List;

    @Component
    public class CustomAuthProvider implements AuthenticationProvider {
        @Autowired
        UserService service;

        List<User> list = new ArrayList<>();
        @Override
        public Authentication authenticate(Authentication auth)
                throws AuthenticationException {
            Import();
            String username = auth.getName();
            String password = auth.getCredentials()
                    .toString();
            BCryptPasswordEncoder passwordEncoder = new BCryptPasswordEncoder();
            for(int i = 0; i < list.size(); i++) {
                if (list.get(i).getEmail().equals(username)
                        && passwordEncoder.matches(password, list.get(i).getPassword())) {
                    QuizController.setAuthor(username);
                    return new UsernamePasswordAuthenticationToken
                            (username, password, Collections.emptyList());
                }
            }
            throw new BadCredentialsException("External system authentication failed");
        }

        @Override
        public boolean supports(Class<?> auth) {
            return auth.equals(UsernamePasswordAuthenticationToken.class);
        }

        public void Import(){
            list = service.getAllUser();
        }
    }
  learner_created: true
- name: src/engine/Quiz.java
  visible: true
  text: |
    package engine;

    import lombok.*;

    import javax.persistence.Column;
    import javax.persistence.ElementCollection;
    import javax.persistence.Entity;
    import javax.persistence.Id;
    import java.util.ArrayList;
    import java.util.List;

    @Data
    @AllArgsConstructor
    @NoArgsConstructor
    @Entity
    public class Quiz {
        @Id
        @Column
        int id;

        @Column
        String title;

        @Column
        String text;

        @ElementCollection
        @Column
        List<String> options;

        @ElementCollection
        @Column
        List<Integer> answer = new ArrayList<>();

        @Column
        String author;
    }
  learner_created: true
- name: src/engine/repos/Repo.java
  visible: true
  text: |
    package engine.repos;

    import engine.Quiz;
    import org.springframework.data.repository.CrudRepository;

    public interface Repo extends CrudRepository<Quiz, Integer> {
    }
  learner_created: true
- name: src/engine/auth/UserRepo.java
  visible: true
  text: |
    package engine.auth;

    import org.springframework.data.repository.CrudRepository;

    public interface UserRepo extends CrudRepository<User, String> {
    }
  learner_created: true
- name: src/engine/auth/UserController.java
  visible: true
  text: |
    package engine.auth;

    import com.google.gson.JsonObject;
    import com.google.gson.JsonParser;
    import org.springframework.beans.factory.annotation.Autowired;
    import org.springframework.http.HttpStatus;
    import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
    import org.springframework.stereotype.Controller;
    import org.springframework.web.bind.annotation.PostMapping;
    import org.springframework.web.bind.annotation.RequestBody;
    import org.springframework.web.bind.annotation.ResponseStatus;
    import org.springframework.web.server.ResponseStatusException;

    import java.util.ArrayList;
    import java.util.List;

    @Controller
    public class UserController {
        List<User> userList = new ArrayList<>();
        @Autowired
        UserService service;

        @PostMapping(value = "/api/register")
        @ResponseStatus(HttpStatus.OK)
        public void register(@RequestBody String json){
            Import();
            JsonObject jObj = new JsonParser().parse(json).getAsJsonObject();
            for(User user : userList){
                if(user.getEmail().equals(jObj.get("email").getAsString())){
                    throw new ResponseStatusException(HttpStatus.BAD_REQUEST);
                }
            }
            newUser(json);
        }

        private void newUser(String json){
            User user = new User();
            JsonObject jObj = new JsonParser().parse(json).getAsJsonObject();
            if(!jObj.get("email").getAsString().contains("@") ||
                    !jObj.get("email").getAsString().contains("."))
                throw new ResponseStatusException(HttpStatus.BAD_REQUEST);
            if(jObj.get("password").getAsString().length() < 5 ||
                    jObj.get("password").getAsString().isBlank())
                throw new ResponseStatusException(HttpStatus.BAD_REQUEST);

            String password = jObj.get("password").getAsString();
            BCryptPasswordEncoder passwordEncoder = new BCryptPasswordEncoder();

            user.setEmail(jObj.get("email").getAsString());
            user.setPassword(passwordEncoder.encode(password));
            userList.add(user);
            service.saveNewUser(user);
        }

        public void Import(){
            userList = service.getAllUser();
        }
    }
  learner_created: true
- name: src/engine/repos/QuizService.java
  visible: true
  text: |
    package engine.repos;

    import engine.Quiz;
    import org.springframework.beans.factory.annotation.Autowired;
    import org.springframework.stereotype.Service;

    import java.util.ArrayList;
    import java.util.List;

    @Service
    public class QuizService {
        @Autowired
        Repo repo;

        public List<Quiz> getAllQuiz(){
            List<Quiz> quizList = new ArrayList<>();
            repo.findAll().forEach(quiz -> quizList.add(quiz));
            return quizList;
        }

        public void saveNewQuiz(Quiz quiz){
            repo.save(quiz);
        }

        public void deleteQuiz(Quiz quiz){
            repo.delete(quiz);
        }
    }
  learner_created: true
- name: src/engine/auth/User.java
  visible: true
  text: |
    package engine.auth;

    import lombok.AllArgsConstructor;
    import lombok.Data;
    import lombok.NoArgsConstructor;

    import javax.persistence.Column;
    import javax.persistence.Entity;
    import javax.persistence.Id;

    @Data
    @AllArgsConstructor
    @NoArgsConstructor
    @Entity
    public class User {
        @Id
        @Column
        String email;
        @Column
        String password;
    }
  learner_created: true
- name: src/engine/auth/UserService.java
  visible: true
  text: |
    package engine.auth;

    import org.springframework.beans.factory.annotation.Autowired;
    import org.springframework.stereotype.Service;

    import java.util.ArrayList;
    import java.util.List;

    @Service
    public class UserService {
        @Autowired
        UserRepo repo;

        public List<User> getAllUser(){
            List<User> userList = new ArrayList<>();
            repo.findAll().forEach(recipe -> userList.add(recipe));
            return userList;
        }

        public void saveNewUser(User user){
            repo.save(user);
        }

        public void deleteUser(User user){
            repo.delete(user);
        }

        public void replaceUser(User user){
            deleteUser(user);
            saveNewUser(user);
        }
    }
  learner_created: true
- name: src/engine/QuizController.java
  visible: true
  text: |
    package engine;

    import com.google.gson.Gson;
    import com.google.gson.JsonArray;
    import com.google.gson.JsonObject;
    import com.google.gson.JsonParser;
    import engine.repos.QuizService;
    import org.springframework.beans.factory.annotation.Autowired;
    import org.springframework.http.HttpStatus;
    import org.springframework.stereotype.Controller;
    import org.springframework.web.bind.annotation.*;
    import org.springframework.web.server.ResponseStatusException;

    import java.util.ArrayList;
    import java.util.Collections;
    import java.util.List;

    @Controller
    public class QuizController {
        List<Quiz> quizzes = new ArrayList<>();
        static String author = "";
        @Autowired
        QuizService service;

        @GetMapping(value = "/api/quizzes/{id}", produces = "application/json")
        @ResponseBody
        public String getQuiz(@PathVariable int id){
            //parse json
            Import();
            return new Gson().toJson(getQuizJson(getQuizByID(id)));
        }

        @PostMapping(value = "/api/quizzes/{id}/solve", produces = "application/json")
        @ResponseBody
        public String solveQuiz(@RequestBody String answer, @PathVariable int id){
            Import();
            return solve(getQuizByID(id), answer);
        }

        @PostMapping(value = "/api/quizzes", produces = "application/json")
        @ResponseBody
        public String newQuiz(@RequestBody String json){
            Import();
            Gson gson = new Gson();
            JsonObject jObj = new JsonObject();
            try {
                jObj = new JsonParser().parse(json).getAsJsonObject();
            }catch(Exception e){
                throw new ResponseStatusException(HttpStatus.BAD_REQUEST);
            }
            //test out the json
            requestHandler(jObj);

            Quiz quiz = new Quiz();
            int id = idGenerator();
            quiz.setId(id);
            quiz.setTitle(jObj.get("title").getAsString());
            quiz.setText(jObj.get("text").getAsString());
            quiz.setOptions(gson.fromJson(jObj.get("options").getAsJsonArray(), List.class));
            quiz.setAuthor(author);
            try {
                List<Integer> list = getAnswer(jObj);
                quiz.setAnswer(list);
            }catch(Exception ignored) {}
            quizzes.add(quiz);
            service.saveNewQuiz(quiz);

            return getQuiz(id);
        }

        @GetMapping(value = "/api/quizzes", produces = "application/json")
        @ResponseBody
        public String getAll(){
            Import();
            JsonArray jArr = new JsonArray();
            for(int i = 0; i < quizzes.size();i++){
                jArr.add(getQuizJson(quizzes.get(i)));
            }
            return new Gson().toJson(jArr);
        }

        @DeleteMapping(value = "/api/quizzes/{id}")
        @ResponseStatus(HttpStatus.NO_CONTENT)
        public void deleteQuiz(@PathVariable int id){
            Import();

            Quiz quiz = getQuizByID(id);
            if(quiz.getAuthor().equals(author)){
                service.deleteQuiz(quiz);
            }else{
                throw new ResponseStatusException(HttpStatus.FORBIDDEN);
            }
        }

        private JsonObject getQuizJson(Quiz quiz){
            JsonObject jObj = new JsonObject();
            jObj.addProperty("id", quiz.getId());
            jObj.addProperty("title", quiz.getTitle());
            jObj.addProperty("text", quiz.getText());
            jObj.add("options", getJsonArr(quiz.getOptions()));
            return jObj;
        }

        private JsonArray getJsonArr(List<String> arr){
            JsonArray jArr = new JsonArray();
            for(int i = 0; i < arr.size(); i++){
                jArr.add(arr.get(i));
            }
            return jArr;
        }

        private String solve(Quiz quiz, String input){
            boolean success = false;
            String feedback = "Wrong answer! Please, try again.";
            JsonObject jObj = new JsonParser().parse(input).getAsJsonObject();

            List<Integer> list = getAnswer(jObj);
            List<Integer> ans = quiz.getAnswer();
            Collections.sort(list);
            Collections.sort(ans);
            if (list.equals(ans)) {
                success = true;
                feedback = "Congratulations, you're right!";
            }
            JsonObject jObj2 = new JsonObject();
            jObj2.addProperty("success", success);
            jObj2.addProperty("feedback", feedback);
            return new Gson().toJson(jObj2);
        }

        private int idGenerator(){
            return (int)(Math.random() * 999 + 1);
        }

        private Quiz getQuizByID(int id){
            for(int i = 0; i < quizzes.size(); i++){
                Quiz q = quizzes.get(i);
                if(q.getId() == id){
                    return q;
                }
            }
            throw new ResponseStatusException(HttpStatus.NOT_FOUND);
        }

        private void requestHandler(JsonObject jObj) {
            Gson gson = new Gson();
            try{
                if(jObj.get("title").getAsString().isBlank()) throw new Exception();
                if(jObj.get("text").getAsString().isBlank()) throw new Exception();
                if(gson.fromJson(jObj.get("options").getAsJsonArray(), List.class).size() < 2) throw new Exception();
            }catch(Exception e){
                throw new ResponseStatusException(HttpStatus.BAD_REQUEST);
            }
        }

        private void Import(){
            quizzes = service.getAllQuiz();
        }

        private List<Integer> getAnswer(JsonObject jObj){
            Gson gson = new Gson();
            int[] arr= gson.fromJson(jObj.get("answer").getAsJsonArray(), int[].class);
            List<Integer> list = new ArrayList<>();
            for(int i : arr){
                list.add(i);
            }
            return list;
        }

        public static void setAuthor(String author){
            QuizController.author = author;
        }
    }
  learner_created: true
- name: src/engine/QuizRepo.java
  visible: true
  learner_created: true
- name: src/engine/PageService.java
  visible: true
  learner_created: true
- name: src/engine/completed/CompletedQuiz.java
  visible: true
  learner_created: true
- name: src/engine/completed/CompletedRepo.java
  visible: true
  learner_created: true
- name: src/engine/completed/CompletedPageRepo.java
  visible: true
  learner_created: true
- name: src/engine/completed/CompletedService.java
  visible: true
  learner_created: true
- name: src/engine/completed/CompletedPageService.java
  visible: true
  learner_created: true
- name: src/quizdb/quizdb.mv.db
  visible: true
  learner_created: true
- name: src/quizdb/quizdb.trace.db
  visible: true
  learner_created: true
feedback_link: https://hyperskill.org/projects/91/stages/509/implement#comment
status: Failed
feedback:
  message: |-
    Wrong answer in test #42

    The JSON object at key content has an incorrect length: should be equal to 1, found 2

    Full JSON:
    {
      &quot;totalPages&quot;: 1,
      &quot;totalElements&quot;: 2,
      &quot;last&quot;: true,
      &quot;first&quot;: true,
      &quot;empty&quot;: false,
      &quot;content&quot;: [
        {
          &quot;id&quot;: 129,
          &quot;completedAt&quot;: &quot;31-07-2021T22:17:36.779669&quot;
        },
        {
          &quot;id&quot;: 503,
          &quot;completedAt&quot;: &quot;31-07-2021T22:17:36.992069&quot;
        }
      ]
    }

    Please find below the output of your program during this failed test.

    ---


      .   ____          _            __ _ _
     /\\ / ___&#39;_ __ _ _(_)_ __  __ _ \ \ \ \
    ( ( )\___ | &#39;_ | &#39;_| | &#39;_ \/ _` | \ \ \ \
     \\/  ___)| |_)| | | | | || (_| |  ) ) ) )
      &#39;  |____| .__|_| |_|_| |_\__, | / / / /
     =========|_|==============|___/=/_/_/_/
     :: Spring Boot ::        (v2.2.2.RELEASE)

    2021-07-31 22:17:30.630  INFO 3632 --- [    Test worker] engine.WebQuizEngine                     : Starting WebQuizEngine on DESKTOP-197FPL9 with PID 3632 (started by wh in C:\Users\wh\IdeaProjects\Web Quiz Engine\Web Quiz Engine\task)
    2021-07-31 22:17:30.633  INFO 3632 --- [    Test worker] engine.WebQuizEngine                     : No active profile set, falling back to default profiles: default
    2021-07-31 22:17:31.542  INFO 3632 --- [    Test worker] .s.d.r.c.RepositoryConfigurationDelegate : Bootstrapping Spring Data JPA repositories in DEFAULT mode.
    2021-07-31 22:17:31.624  INFO 3632 --- [    Test worker] .s.d.r.c.RepositoryConfigurationDelegate : Finished Spring Data repository scanning in 73ms. Found 5 JPA repository interfaces.
    2021-07-31 22:17:31.983  INFO 3632 --- [    Test worker] trationDelegate$BeanPostProcessorChecker : Bean &#39;org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration&#39; of type [org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
    2021-07-31 22:17:32.213  INFO 3632 --- [    Test worker] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat initialized with port(s): 8000 (http)
    2021-07-31 22:17:32.224  INFO 3632 --- [    Test worker] o.apache.catalina.core.StandardService   : Starting service [Tomcat]
    2021-07-31 22:17:32.224  INFO 3632 --- [    Test worker] org.apache.catalina.core.StandardEngine  : Starting Servlet engine: [Apache Tomcat/9.0.29]
    2021-07-31 22:17:32.331  INFO 3632 --- [    Test worker] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring embedded WebApplicationContext
    2021-07-31 22:17:32.331  INFO 3632 --- [    Test worker] o.s.web.context.ContextLoader            : Root WebApplicationContext: initialization completed in 1656 ms
    2021-07-31 22:17:32.442  INFO 3632 --- [    Test worker] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Starting...
    2021-07-31 22:17:32.621  INFO 3632 --- [    Test worker] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Start completed.
    2021-07-31 22:17:32.628  INFO 3632 --- [    Test worker] o.s.b.a.h2.H2ConsoleAutoConfiguration    : H2 console available at &#39;/h2-console&#39;. Database available at &#39;jdbc:h2:file:C:/Users/wh/IdeaProjects/Web Quiz Engine/Web Quiz Engine/task/src/quizdb/quizdb&#39;
    2021-07-31 22:17:32.847  INFO 3632 --- [    Test worker] o.hibernate.jpa.internal.util.LogHelper  : HHH000204: Processing PersistenceUnitInfo [name: default]
    2021-07-31 22:17:32.932  INFO 3632 --- [    Test worker] org.hibernate.Version                    : HHH000412: Hibernate Core {5.4.9.Final}
    2021-07-31 22:17:33.082  INFO 3632 --- [    Test worker] o.hibernate.annotations.common.Version   : HCANN000001: Hibernate Commons Annotations {5.1.0.Final}
    2021-07-31 22:17:33.205  INFO 3632 --- [    Test worker] org.hibernate.dialect.Dialect            : HHH000400: Using dialect: org.hibernate.dialect.H2Dialect
    2021-07-31 22:17:33.996  INFO 3632 --- [    Test worker] o.h.e.t.j.p.i.JtaPlatformInitiator       : HHH000490: Using JtaPlatform implementation: [org.hibernate.engine.transaction.jta.platform.internal.NoJtaPlatform]
    2021-07-31 22:17:34.003  INFO 3632 --- [    Test worker] j.LocalContainerEntityManagerFactoryBean : Initialized JPA EntityManagerFactory for persistence unit &#39;default&#39;
    2021-07-31 22:17:34.268  WARN 3632 --- [    Test worker] JpaBaseConfiguration$JpaWebConfiguration : spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
    2021-07-31 22:17:34.406  INFO 3632 --- [    Test worker] o.s.s.web.DefaultSecurityFilterChain     : Creating filter chain: any request, [org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter@41382fe8, org.springframework.security.web.context.SecurityContextPersistenceFilter@3a6f6968, org.springframework.security.web.header.HeaderWriterFilter@632071a5, org.springframework.security.web.authentication.logout.LogoutFilter@5655501b, org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter@7e3cd513, org.springframework.security.web.authentication.ui.DefaultLoginPageGeneratingFilter@6fc17fa8, org.springframework.security.web.authentication.ui.DefaultLogoutPageGeneratingFilter@10cbfb94, org.springframework.security.web.authentication.www.BasicAuthenticationFilter@70dceadc, org.springframework.security.web.savedrequest.RequestCacheAwareFilter@779afbf8, org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter@4097bbf6, org.springframework.security.web.authentication.AnonymousAuthenticationFilter@1dc816a7, org.springframework.security.web.session.SessionManagementFilter@59a72a13, org.springframework.security.web.access.ExceptionTranslationFilter@59a22d4a, org.springframework.security.web.access.intercept.FilterSecurityInterceptor@4fc234e2]
    2021-07-31 22:17:34.525  INFO 3632 --- [    Test worker] o.s.s.concurrent.ThreadPoolTaskExecutor  : Initializing ExecutorService &#39;applicationTaskExecutor&#39;
    2021-07-31 22:17:34.759  INFO 3632 --- [    Test worker] o.s.b.a.e.web.EndpointLinksResolver      : Exposing 14 endpoint(s) beneath base path &#39;/actuator&#39;
    2021-07-31 22:17:34.805  INFO 3632 --- [    Test worker] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat started on port(s): 8000 (http) with context path &#39;&#39;
    2021-07-31 22:17:34.807  INFO 3632 --- [    Test worker] engine.WebQuizEngine                     : Started WebQuizEngine in 4.49 seconds (JVM running for 5.277)
    2021-07-31 22:17:35.095  INFO 3632 --- [nio-8000-exec-1] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring DispatcherServlet &#39;dispatcherServlet&#39;
    2021-07-31 22:17:35.096  INFO 3632 --- [nio-8000-exec-1] o.s.web.servlet.DispatcherServlet        : Initializing Servlet &#39;dispatcherServlet&#39;
    2021-07-31 22:17:35.103  INFO 3632 --- [nio-8000-exec-1] o.s.web.servlet.DispatcherServlet        : Completed initialization in 7 ms
  time: Sat, 31 Jul 2021 14:17:37 UTC
record: -1
